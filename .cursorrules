R√®gle d‚Äôor : Ne fais AUCUNE modification de fichier sans mon autorisation. 


# R√®gles de d√©veloppement universelles

## üìö Documentation obligatoire
- **Documentation compl√®te** : chaque fonction, classe et module doit √™tre document√©
- **Commentaires explicatifs** : logique m√©tier document√©e (pas de code implicite)
- **Exemples si n√©cessaire** : param√®tres, retours, cas d'usage
- **Pas de code sans explication** : tout doit √™tre compr√©hensible

## üèóÔ∏è Architecture et organisation
- **S√©paration des responsabilit√©s** : d√©coupage clair entre logique m√©tier, affichage, et gestion des donn√©es
- **Code modulaire** : √©viter les fichiers monolithiques
- **Nommage explicite** : variables, fonctions, et structures de donn√©es claires
- **Lisibilit√© prioritaire** : code compr√©hensible avant optimisation

## üß™ Tests et qualit√©
- **Tests pour chaque fonctionnalit√©** : proc√©dures de test document√©es
- **Validation avant commit** : v√©rifier que tout fonctionne
- **Pas de "quick fix"** : chaque modification doit √™tre document√©e
- **Gestion des erreurs** : messages clairs pour l'utilisateur

## üìù Gestion de projet
- **README √† jour** : structure des donn√©es, √©volutions, fonctionnalit√©s
- **Changelog** : tracer toutes les modifications
- **Documentation des limitations** : points d'attention techniques
- **Instructions d'utilisation** : comment utiliser l'application

## üö´ Anti-patterns √† √©viter
- Code non document√©
- Fonctions trop longues (>50 lignes)
- Variables avec des noms non explicites
- Logique m√©tier m√©lang√©e avec l'interface
- Modifications sans tests
- eviter les modules de plus de 300-500 lignes
- privil√©gier le d√©coupage par responsabilit√© afin de facilit√© la maintenance et le d√©boggage


## ‚úÖ Bonnes pratiques
- **Documentation vivante** : mise √† jour avec le code
- **Tests manuels** : validation de chaque fonctionnalit√©
- **Code maintenable** : penser √† la maintenance future
- **Standards du langage** : respecter les conventions du langage utilis√©
- traiter les demandes d'√©volution en √©vitant les solutions complexes. Il faut - √©viter au maximum de casser des fonctions existantes et privl√©gier la solution la plus simple avant d'√©viter les r√©gressions.

- avant toute modification du code il faudra absolument demander l'autorisation
